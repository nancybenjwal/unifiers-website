{"version":3,"file":"component---src-pages-using-typescript-tsx-a31905c75a0fd7738373.js","mappings":"8KA+CA,UAlCwD,SAAHA,GAAA,IACnDC,EAAID,EAAJC,KACAC,EAAQF,EAARE,SAAQ,OAERC,EAAAA,cAACC,EAAAA,EAAM,KACLD,EAAAA,cAAA,UAAI,mBACcA,EAAAA,cAAA,SAAG,0BAErBA,EAAAA,cAAA,SAAG,4CACwCA,EAAAA,cAAA,YAAM,YAAe,0CAClCA,EAAAA,cAAA,YAAM,YAAe,qCACzCA,EAAAA,cAAA,YAAM,oBAAuB,MAEvCA,EAAAA,cAAA,SAAG,4CACwCA,EAAAA,cAAA,YAAM,cAAiB,oBACxDA,EAAAA,cAAA,YAAM,cAAiB,gBAAaA,EAAAA,cAAA,YAAM,YAAe,UAEnEA,EAAAA,cAAA,SAAG,gCAC4BA,EAAAA,cAAA,YAAOD,EAASG,UAAgB,uBACnDJ,EAAKK,KAAKC,UAAU,KAEhCJ,EAAAA,cAAA,SAAG,kCAC+B,IAChCA,EAAAA,cAAA,KAAGK,KAAK,yEAAwE,kCAE5E,KAGNL,EAAAA,cAACM,EAAAA,KAAI,CAACC,GAAG,KAAI,2BACN,C,mECLX,IAtBe,SAAHV,GAAsB,IAADW,EAAfC,EAAQZ,EAARY,SACVX,GAAOY,EAAAA,EAAAA,gBAAe,cAU5B,OACEV,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAACW,EAAAA,EAAM,CAACC,WAAiC,QAAtBJ,EAAAV,EAAKK,KAAKU,oBAAY,IAAAL,OAAA,EAAtBA,EAAwBM,QAAK,UAChDd,EAAAA,cAAA,WACEA,EAAAA,cAAA,YAAOS,IAETT,EAAAA,cAACe,EAAAA,EAAM,MAGb,C","sources":["webpack://gatsby-starter-default/./src/pages/using-typescript.tsx","webpack://gatsby-starter-default/./src/components/layout.js"],"sourcesContent":["// If you don't want to use TypeScript you can delete this file!\nimport * as React from \"react\";\nimport { PageProps, Link, graphql } from \"gatsby\";\n\nimport Layout from \"../components/layout\";\nimport Seo from \"../components/seo\";\n\ntype DataProps = {\n  site: {\n    buildTime: string;\n  };\n};\n\nconst UsingTypescript: React.FC<PageProps<DataProps>> = ({\n  data,\n  location,\n}) => (\n  <Layout>\n    <h1>\n      Gatsby supports <b>TypeScript by default</b>\n    </h1>\n    <p>\n      This means that you can create and write <code>.ts/.tsx</code> files for\n      your pages, components, and <code>gatsby-*</code> configuration files (for\n      example <code>gatsby-config.ts</code>).\n    </p>\n    <p>\n      For type checking you'll want to install <code>typescript</code> via npm\n      and run <code>tsc --init</code> to create a <code>tsconfig</code> file.\n    </p>\n    <p>\n      You're currently on the page <code>{location.pathname}</code> which was\n      built on {data.site.buildTime}.\n    </p>\n    <p>\n      To learn more, head over to our{\" \"}\n      <a href=\"https://www.gatsbyjs.com/docs/how-to/custom-configuration/typescript/\">\n        documentation about TypeScript\n      </a>\n      .\n    </p>\n    <Link to=\"/\">Go back to the homepage</Link>\n  </Layout>\n);\n\n// export const Head: HeadFC<DataProps> = () => <Seo title=\"Using TypeScript\" />;\n\nexport default UsingTypescript;\n\nexport const query = graphql`\n  {\n    site {\n      buildTime(formatString: \"YYYY-MM-DD hh:mm a z\")\n    }\n  }\n`;\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nimport Header from \"./header\"\nimport Footer from \"./footer\"\nimport \"./custom.css\"\nimport \"./media-queries.css\"\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  return (\n    <>\n      <Header siteTitle={data.site.siteMetadata?.title || `Title`} />\n      <div>\n        <main>{children}</main>\n      </div>\n      <Footer />\n    </>\n  )\n}\n\nexport default Layout\n"],"names":["_ref","data","location","React","Layout","pathname","site","buildTime","href","Link","to","_data$site$siteMetada","children","useStaticQuery","Header","siteTitle","siteMetadata","title","Footer"],"sourceRoot":""}